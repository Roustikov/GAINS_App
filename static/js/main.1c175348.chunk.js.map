{"version":3,"sources":["TaskForm.js","Task.js","TaskList.js","mindMap.tsx","App.js","index.js"],"names":["TaskForm","props","addTask","event","addTaskCallback","state","setState","id","name","description","assignee","progress","start","end","preventDefault","handleInputChange","bind","target","value","type","checked","this","onSubmit","className","onChange","require","Component","Task","task","TaskList","tasks","map","MindMapContainer","items","DataManager","mindMap","Query","take","width","height","layout","dataSourceSettings","parentId","dataManager","root","getNodeDefaults","obj","shape","content","data","Label","style","fill","strokeColor","strokeWidth","borderColor","backgroundColor","constraints","NodeConstraints","Default","Rotate","Resize","borderWidth","margin","left","right","top","bottom","getConnectorDefaults","connector","diagram","targetDecorator","services","DataBinding","MindMap","React","App","taskData","push","viewMode","dependencies","board","columns","card","source","destination","changedState","index","findIndex","element","toColumnId","console","log","title","cards","filter","item","mapData","split","initialBoard","getBoard","onCardDragEnd","taskDragEnd","getMindMap","getTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c175348.chunk.js","sourcesContent":["var React = require('react');\r\n\r\nclass TaskForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        id: \"Task6\",\r\n        name: \"Task6\",\r\n        description: \"Test\",\r\n        assignee: \"User\",\r\n        progress: \"80\",\r\n        start: \"2020-11-23\",\r\n        end: \"2021-11-23\",\r\n        state: \"ToDo\"\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  addTask = (event) => {\r\n    this.props.addTaskCallback(this.state);\r\n    // generate new id\r\n    this.setState({\r\n        id: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n        assignee: \"\",\r\n        progress: \"\",\r\n        start: \"\",\r\n        end: \"\",\r\n        state: \"ToDo\"\r\n    })\r\n    \r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit = {this.addTask} className=\"container\">\r\n        <div>\r\n      <label>Create new task</label>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Title:</label>\r\n        <input\r\n          name=\"name\"\r\n          type=\"input\"\r\n          value={this.state.name}\r\n          onChange={this.handleInputChange} />\r\n          </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Description:</label>\r\n          <input\r\n            name=\"description\"\r\n            type=\"text\"\r\n            value={this.state.description}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Assignee:</label>\r\n          <input\r\n            name=\"assignee\"\r\n            type=\"text\"\r\n            value={this.state.assignee}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Progress:</label>\r\n          <input\r\n            name=\"progress\"\r\n            type=\"text\"\r\n            value={this.state.progress}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n        \r\n        <div className=\"input-group\">\r\n        <label>Start date:</label>\r\n          <input\r\n            name=\"start\"\r\n            type=\"text\"\r\n            value={this.state.start}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n        \r\n        <div className=\"input-group\">\r\n        <label>End date:</label>\r\n          <input\r\n            name=\"end\"\r\n            type=\"text\"\r\n            value={this.state.end}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n        <input className=\"add-task-button\" type=\"submit\" value = \"Add task\"/>\r\n        </div>\r\n      </form>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskForm;","var React = require('react');\r\n\r\nclass Task extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n        <div>Id:{this.props.task.id} Name:{this.props.task.name} State: {this.props.task.state} Start:{this.props.task.start} End:{this.props.task.end}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import Task from \"./Task.js\";\r\nvar React = require('react');\r\n\r\nclass TaskList extends React.Component {\r\n\r\n    render() {\r\n        let tasks = this.props.tasks.map(task => {return <Task task={task} key={task.id}/>});\r\n        \r\n        return(\r\n        <div className=\"container wide\">\r\n            <label>Task List</label>\r\n            {tasks}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskList;","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport {\r\n    Diagram,\r\n    DiagramComponent,\r\n    Inject,\r\n    ConnectorModel,\r\n    Node,\r\n    DataBinding,\r\n    LayoutType,\r\n    Rect,\r\n    HorizontalAlignment,\r\n    VerticalAlignment,\r\n    NodeModel,\r\n    TextModel,\r\n    MindMap,\r\n    NodeConstraints\r\n} from \"@syncfusion/ej2-react-diagrams\";\r\nimport {\r\n    DataManager,\r\n    Query\r\n} from '@syncfusion/ej2-data';\r\n\r\n//Initializes data source\r\nclass MindMapContainer extends React.Component {\r\n  state: {items:DataManager};\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\nthis.state = {items:new DataManager(props.mindMap as JSON[], new Query().take(7))};\r\n\r\n}\r\n\r\n  render() {\r\n      return(\r\n        <DiagramComponent id = \"diagram\"\r\n        width = {\r\n            '100%'\r\n        }\r\n        height = {\r\n            '550px'\r\n        }\r\n        //Uses layout to auto-arrange nodes on the diagram page\r\n        layout = {\r\n            {\r\n                //Sets layout type\r\n                type: 'MindMap'\r\n            }\r\n        }\r\n        //Configures data source for diagram\r\n        dataSourceSettings = {\r\n            {\r\n                id: 'id',\r\n                parentId: 'parentId',\r\n                dataManager: this.state.items,\r\n                root: \"1\"\r\n            }\r\n        }\r\n        //Sets the default properties for nodes and connectors\r\n        getNodeDefaults = {\r\n            (obj: Node) => {\r\n                obj.shape = {\r\n                    type: 'Text',\r\n                    content: (obj.data as {\r\n                        Label: 'string'\r\n                    }).Label,\r\n                };\r\n                obj.style = {\r\n                    fill: '#6BA5D7',\r\n                    strokeColor: 'none',\r\n                    strokeWidth: 2\r\n                };\r\n                obj.borderColor = 'white';\r\n                obj.backgroundColor = '#6BA5D7';\r\n                obj.constraints = NodeConstraints.Default & ~NodeConstraints.Rotate & ~NodeConstraints.Resize;\r\n                obj.borderWidth = 1;\r\n                (obj.shape as TextModel).margin = {\r\n                    left: 20,\r\n                    right: 20,\r\n                    top: 20,\r\n                    bottom: 20\r\n                };\r\n                return obj;\r\n            }\r\n        }\r\n        getConnectorDefaults = {\r\n            (connector: ConnectorModel, diagram: Diagram) => {\r\n                connector.style = {\r\n                    strokeColor: '#6BA5D7',\r\n                    strokeWidth: 2\r\n                };\r\n                connector.targetDecorator!.style!.fill = '#6BA5D7';\r\n                connector!.targetDecorator!.style!.strokeColor = '#6BA5D7';\r\n                connector.type = 'Orthogonal';\r\n                return connector;\r\n            }\r\n        }\r\n        ><Inject services = {[DataBinding, MindMap]}/>\r\n        </DiagramComponent>\r\n      )\r\n  }\r\n}\r\n\r\nexport default MindMapContainer;\r\n","import './App.css';\nimport TaskForm from './TaskForm.js'\nimport TaskList from './TaskList.js'\nimport ReactGantt from 'gantt-for-react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport Board from '@lourenci/react-kanban'\nimport '@lourenci/react-kanban/dist/styles.css'\n\nimport MindMapContainer from './mindMap.tsx'\n\nvar React = require('react');\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewMode: \"Month\",\n            tasks: [\n                { id:\"Task1\", name:\"Test1\", state: \"Done\", start:\"2020-11-20\", end:\"2021-02-24\", progress:\"100\", dependencies:\"\" },\n                { id:\"Task2\", name:\"Test2\", state: \"ToDo\", start:\"2020-11-21\", end:\"2021-04-24\", progress:\"10\", dependencies:\"Task1\" },\n                { id:\"Task3\", name:\"Test3\", state: \"ToDo\", start:\"2020-11-23\", end:\"2021-04-26\", progress:\"30\", dependencies:\"Task1\" },\n                { id:\"Task4\", name:\"Test4\", state: \"ToDo\", start:\"2020-11-23\", end:\"2021-06-26\", progress:\"10\", dependencies:\"Task3\" },\n            ],\n            board: {\n                columns: {}\n            },\n        };\n    }\n    \n    taskDragEnd(board, card, source, destination) {\n        let changedState = [...this.state.tasks];\n        let index = this.state.tasks.findIndex(element => element.id == card.id );\n        changedState[index] = {...changedState[index], state: destination.toColumnId == 1 ? \"ToDo\" : \"Done\"};\n        this.setState({tasks: changedState}, ()=>{console.log(this.state)});\n    }\n\n    addTask = (taskData) => {\n        this.state.tasks.push(taskData);\n        this.setState(this.state);\n    }\n    \n    getBoard(){\n        let columns = [\n            {\n              id: 1,\n              title: 'ToDo:',\n              cards: []\n            },\n            {\n              id: 2,\n              title: 'Done:',\n              cards: []\n            }\n          ];\n        columns[0].cards = this.state.tasks.filter(item => {item.title=item.name; return item.state===\"ToDo\";});\n        columns[1].cards = this.state.tasks.filter(item => {item.title=item.name; return item.state===\"Done\";});\n        return {columns: columns};\n    }\n\n    getMindMap(){\n        let mapData = [{\n            id: \"1\",\n            Label: 'Project'\n        }];\n\n        this.state.tasks.map(task=>{\n            mapData.push({\n                id: task.id,\n                Label: task.name,\n                parentId: task.dependencies ? task.dependencies.split(',') : \"1\"\n            })\n        });\n        \n\n        return mapData;\n    }\n\n    getTasks(){\n        return this.state.tasks;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n            <Tabs>\n            <TabList>\n            <Tab>Edit Tasks</Tab>\n            <Tab>Kanban Board</Tab>\n            <Tab>Mind Map</Tab>\n            <Tab>Gantt Diagram</Tab>\n            </TabList>\n            \n            <TabPanel>\n            <div className=\"wrapper\">\n                <TaskForm addTaskCallback={this.addTask}></TaskForm>\n                <TaskList tasks={this.state.tasks}></TaskList>\n            </div>\n            </TabPanel>\n\n            <TabPanel>\n                <div>\n                <Board initialBoard={this.getBoard()} onCardDragEnd={this.taskDragEnd.bind(this)}/>\n                </div>\n            </TabPanel>\n\n            <TabPanel>\n                <MindMapContainer mindMap={this.getMindMap()}/>\n            </TabPanel>\n\n            <TabPanel>\n                <div>\n                    <ReactGantt tasks={this.getTasks()} viewMode={this.state.viewMode}></ReactGantt>\n                </div>\n            </TabPanel>\n\n            </Tabs>\n            \n            </div>);\n        }\n    }\n    \n    export default App;\n    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n    <App />,\n   </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}