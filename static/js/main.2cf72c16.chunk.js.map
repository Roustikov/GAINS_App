{"version":3,"sources":["TaskForm.js","Task.js","TaskList.js","mindMap.tsx","App.js","index.js"],"names":["TaskForm","props","addTask","event","addTaskCallback","state","setState","getNewForm","preventDefault","handleInputChange","bind","target","value","type","checked","name","this","nextId","Math","max","tasks","map","task","id","replace","description","assignee","progress","start","end","dependencies","onSubmit","className","onChange","require","Component","Task","TaskList","MindMapContainer","items","DataManager","mindMap","width","height","layout","dataSourceSettings","parentId","dataManager","root","getNodeDefaults","obj","shape","content","data","Label","style","fill","strokeColor","strokeWidth","borderColor","backgroundColor","constraints","NodeConstraints","Default","Rotate","Resize","borderWidth","margin","left","right","top","bottom","getConnectorDefaults","connector","diagram","targetDecorator","services","DataBinding","MindMap","React","App","taskData","push","viewMode","board","columns","card","source","destination","changedState","index","findIndex","element","toColumnId","console","log","title","cards","filter","item","mapData","split","initialBoard","getBoard","onCardDragEnd","taskDragEnd","getMindMap","getTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cf72c16.chunk.js","sourcesContent":["var React = require('react');\r\n\r\nclass TaskForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.getNewForm();\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  getNewForm(){\r\n    let nextId = Math.max(...this.props.tasks.map(task=>task.id.replace('Task','')))+1;\r\n    return (\r\n    {\r\n        id: \"Task\"+nextId,\r\n        name: \"Test\"+nextId,\r\n        description: \"Test\",\r\n        assignee: \"User\",\r\n        progress: nextId,\r\n        start: \"2020-11-23\",\r\n        end: \"2021-11-23\",\r\n        state: \"ToDo\",\r\n        dependencies: ''\r\n    })\r\n  }\r\n\r\n  addTask = (event) => {\r\n    this.props.addTaskCallback(this.state);\r\n    // generate new id \r\n    this.setState(this.getNewForm()); \r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit = {this.addTask} className=\"container\">\r\n        <div>\r\n      <label>Create new task</label>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Title:</label>\r\n        <input\r\n          className=\"input-value\"\r\n          name=\"name\"\r\n          type=\"input\"\r\n          value={this.state.name}\r\n          onChange={this.handleInputChange} />\r\n          </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Description:</label>\r\n          <input\r\n            className=\"input-value\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            value={this.state.description}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Assignee:</label>\r\n          <input\r\n            className=\"input-value\"\r\n            name=\"assignee\"\r\n            type=\"text\"\r\n            value={this.state.assignee}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Progress:</label>\r\n          <input\r\n            className=\"input-value\"\r\n            name=\"progress\"\r\n            type=\"text\"\r\n            value={this.state.progress}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n        \r\n        <div className=\"input-group\">\r\n        <label>Start date:</label>\r\n          <input\r\n            className=\"input-value\"\r\n            name=\"start\"\r\n            type=\"text\"\r\n            value={this.state.start}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n        \r\n        <div className=\"input-group\">\r\n        <label>End date:</label>\r\n          <input\r\n            className=\"input-value\"\r\n            name=\"end\"\r\n            type=\"text\"\r\n            value={this.state.end}\r\n            onChange={this.handleInputChange} />\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n        <label>Dependency:</label>\r\n          <select name=\"dependencies\"\r\n            className=\"input-value\"\r\n            type=\"text\"\r\n            value={this.state.dependencies}\r\n            onChange={this.handleInputChange}>\r\n              <option value=\"\"> </option>\r\n            {this.props.tasks.map(task=>{return <option value={task.id} key={task.id}>{task.id}</option>})}\r\n          </select>\r\n        </div>\r\n\r\n        <input className=\"add-task-button\" type=\"submit\" value = \"Add task\"/>\r\n        </div>\r\n      </form>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskForm;","var React = require('react');\r\n\r\nclass Task extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n        <div>Id:{this.props.task.id} Name:{this.props.task.name} State: {this.props.task.state} Start:{this.props.task.start} End:{this.props.task.end} Depends on: {this.props.task.dependencies}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import Task from \"./Task.js\";\r\nvar React = require('react');\r\n\r\nclass TaskList extends React.Component {\r\n\r\n    render() {\r\n        let tasks = this.props.tasks.map(task => {return <Task task={task} key={task.id}/>});\r\n        \r\n        return(\r\n        <div className=\"container wide\">\r\n            <label>Task List</label>\r\n            {tasks}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskList;","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport {\r\n    Diagram,\r\n    DiagramComponent,\r\n    Inject,\r\n    ConnectorModel,\r\n    Node,\r\n    DataBinding,\r\n    LayoutType,\r\n    Rect,\r\n    HorizontalAlignment,\r\n    VerticalAlignment,\r\n    NodeModel,\r\n    TextModel,\r\n    MindMap,\r\n    NodeConstraints,\r\n    ConnectorShape,\r\n    Decorator\r\n} from \"@syncfusion/ej2-react-diagrams\";\r\nimport {\r\n    DataManager,\r\n    Query\r\n} from '@syncfusion/ej2-data';\r\n\r\n//Initializes data source\r\nclass MindMapContainer extends React.Component {\r\n  state: {items:DataManager};\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {items:new DataManager(props.mindMap as JSON[])};\r\n}\r\n\r\n  render() {\r\n      return(\r\n        <DiagramComponent id = \"diagram\"\r\n        width = {\r\n            '100%'\r\n        }\r\n        height = {\r\n            '550px'\r\n        }\r\n        //Uses layout to auto-arrange nodes on the diagram page\r\n        layout = {\r\n            {\r\n                //Sets layout type\r\n                type: 'MindMap'\r\n            }\r\n        }\r\n        //Configures data source for diagram\r\n        dataSourceSettings = {\r\n            {\r\n                id: 'id',\r\n                parentId: 'parentId',\r\n                dataManager: this.state.items,\r\n                root: \"1\"\r\n            }\r\n        }\r\n        //Sets the default properties for nodes and connectors\r\n        getNodeDefaults = {\r\n            (obj: Node) => {\r\n                obj.shape = {\r\n                    type: 'Text',\r\n                    content: (obj.data as {\r\n                        Label: 'string'\r\n                    }).Label,\r\n                };\r\n                obj.style = {\r\n                    fill: '#6BA5D7',\r\n                    strokeColor: 'none',\r\n                    strokeWidth: 2\r\n                };\r\n                obj.borderColor = 'white';\r\n                obj.backgroundColor = '#6BA5D7';\r\n                obj.constraints = NodeConstraints.Default & ~NodeConstraints.Rotate & ~NodeConstraints.Resize;\r\n                obj.borderWidth = 1;\r\n                (obj.shape as TextModel).margin = {\r\n                    left: 20,\r\n                    right: 20,\r\n                    top: 20,\r\n                    bottom: 20\r\n                };\r\n                return obj;\r\n            }\r\n        }\r\n        getConnectorDefaults = {\r\n            (connector: ConnectorModel, diagram: Diagram) => {\r\n                connector.style = {\r\n                    strokeColor: '#6BA5D7',\r\n                    strokeWidth: 2\r\n                };\r\n                connector.targetDecorator!.shape = \"None\"\r\n                connector.targetDecorator!.style!.strokeColor = '#6BA5D7';\r\n                connector.type = 'Bezier';\r\n                \r\n                return connector;\r\n            }\r\n        }\r\n        ><Inject services = {[DataBinding, MindMap]}/>\r\n        </DiagramComponent>\r\n      )\r\n  }\r\n}\r\n\r\nexport default MindMapContainer;\r\n","import './App.css';\nimport TaskForm from './TaskForm.js'\nimport TaskList from './TaskList.js'\nimport ReactGantt from 'gantt-for-react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport Board from '@lourenci/react-kanban'\nimport '@lourenci/react-kanban/dist/styles.css'\n\nimport MindMapContainer from './mindMap.tsx'\n\nvar React = require('react');\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewMode: \"Month\",\n            tasks: [\n                { id:\"Task1\", name:\"Test1\", state: \"Done\", start:\"2020-11-20\", end:\"2021-02-24\", progress:\"100\", dependencies:\"\" },\n                { id:\"Task2\", name:\"Test2\", state: \"ToDo\", start:\"2020-11-21\", end:\"2021-04-24\", progress:\"10\", dependencies:\"Task1\" },\n                { id:\"Task3\", name:\"Test3\", state: \"ToDo\", start:\"2020-11-23\", end:\"2021-04-26\", progress:\"30\", dependencies:\"Task1\" },\n                { id:\"Task4\", name:\"Test4\", state: \"ToDo\", start:\"2020-11-23\", end:\"2021-06-26\", progress:\"10\", dependencies:\"Task3\" },\n            ],\n            board: {\n                columns: {}\n            },\n        };\n    }\n    \n    taskDragEnd(board, card, source, destination) {\n        let changedState = [...this.state.tasks];\n        let index = this.state.tasks.findIndex(element => element.id == card.id );\n        changedState[index] = {...changedState[index], state: destination.toColumnId == 1 ? \"ToDo\" : \"Done\"};\n        this.setState({tasks: changedState}, ()=>{console.log(this.state)});\n    }\n\n    addTask = (taskData) => {\n        this.state.tasks.push(taskData);\n        this.setState(this.state);\n    }\n    \n    getBoard(){\n        let columns = [\n            {\n              id: 1,\n              title: 'ToDo:',\n              cards: []\n            },\n            {\n              id: 2,\n              title: 'Done:',\n              cards: []\n            }\n          ];\n        columns[0].cards = this.state.tasks.filter(item => {item.title=item.name; return item.state===\"ToDo\";});\n        columns[1].cards = this.state.tasks.filter(item => {item.title=item.name; return item.state===\"Done\";});\n        return {columns: columns};\n    }\n\n    getMindMap(){\n        let mapData = [{\n            id: \"1\",\n            Label: 'Project'\n        }];\n\n        this.state.tasks.map(task=>{\n            mapData.push({\n                id: task.id,\n                Label: task.name,\n                parentId: task.dependencies ? task.dependencies.split(',') : \"1\"\n            })\n        });\n        \n\n        return mapData;\n    }\n\n    getTasks(){\n        return this.state.tasks;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n            <Tabs>\n            <TabList>\n            <Tab>Edit Tasks</Tab>\n            <Tab>Kanban Board</Tab>\n            <Tab>Mind Map</Tab>\n            <Tab>Gantt Diagram</Tab>\n            </TabList>\n            \n            <TabPanel>\n            <div className=\"wrapper\">\n                <TaskForm addTaskCallback={this.addTask} tasks={this.state.tasks}></TaskForm>\n                <TaskList tasks={this.state.tasks}></TaskList>\n            </div>\n            </TabPanel>\n\n            <TabPanel>\n                <div>\n                <Board initialBoard={this.getBoard()} onCardDragEnd={this.taskDragEnd.bind(this)}/>\n                </div>\n            </TabPanel>\n\n            <TabPanel>\n                <MindMapContainer mindMap={this.getMindMap()}/>\n            </TabPanel>\n\n            <TabPanel>\n                <div>\n                    <ReactGantt tasks={this.getTasks()} viewMode={this.state.viewMode}></ReactGantt>\n                </div>\n            </TabPanel>\n\n            </Tabs>\n            \n            </div>);\n        }\n    }\n    \n    export default App;\n    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n    <App />,\n   </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}